{"version":3,"sources":["../../src/controllers/orders.js"],"names":["Order","db","orden","Product","producto","findAllOrders","req","res","findAll","include","model","as","nested","then","json","orders","catch","status","err","findById","id","params","orderId","findOne","where","order","update","body","type","deliveryDate","deliveryTime","subtotal","total","inputDate","state","promotion","deleteOrder","destroy","msg","create","products","shipping","calculateOrderPrice","newOrder","test"],"mappings":"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","file":"orders.js","sourcesContent":["import db from '../models';\n\nconst Order = db.orden;\nconst Product = db.producto;\n\nconst findAllOrders = (req, res) => {\n  Order.findAll({\n    include: [{model: Product, as: 'products', nested: true}],\n  })\n    .then(orders => res.json({orders}))\n    .catch(err => res.status(500).json({err}));\n};\n\nconst findById = (req, res) => {\n  const id = req.params.orderId;\n\n  Order.findOne({\n    where: {id},\n  })\n    .then(order => {\n      res.json({order});\n    })\n    .catch(err => res.status(500).json({err}));\n};\n\nconst update = (req, res) => {\n  let {\n    type,\n    deliveryDate,\n    deliveryTime,\n    subtotal,\n    total,\n    inputDate,\n    state,\n  } = req.body;\n  const id = req.params.orderId;\n\n  Order.update(\n    {\n      type,\n      deliveryDate,\n      deliveryTime,\n      subtotal,\n      total,\n      inputDate,\n      state,\n    },\n    {where: {id}},\n  )\n    .then(promotion => res.status(200).json({promotion}))\n    .catch(err => res.status(500).json({err}));\n};\n\nconst deleteOrder = (req, res) => {\n  const id = req.params.orderId;\n\n  Order.destroy({where: {id}})\n    .then(() =>\n      res.status(200).json({msg: 'Order has been deleted successfully!'}),\n    )\n    .catch(err => res.status(500).json({msg: 'Failed to delete!'}));\n};\n\nconst create = (req, res) => {\n  const {\n    type,\n    products,\n    deliveryDate,\n    deliveryTime,\n    shipping,\n    inputDate,\n  } = req.body;\n\n  const {subtotal, total} = calculateOrderPrice({products});\n\n  const newOrder = {\n    type,\n    products,\n    subtotal: 1000,\n    total: shipping + 1000,\n    deliveryDate,\n    deliveryTime,\n    shipping,\n    inputDate,\n    state: 'PROCESO',\n  };\n\n  Order.create(newOrder)\n    .then(order => {\n      return res.json({order, test: Order});\n    })\n    .catch(err => res.status(500).json({err}));\n};\n\nexport {create, update, deleteOrder, findAllOrders, findById};\n"]}