{"version":3,"sources":["../../src/controllers/orders.js"],"names":["Order","db","orden","Product","producto","Promotion","promocion","findAllOrders","req","res","findAll","include","model","as","nested","then","orders","json","catch","err","status","findById","id","params","orderId","findOne","where","order","update","body","type","deliveryDate","deliveryTime","subtotal","total","inputDate","state","promotion","deleteOrder","destroy","msg","create","user","products","promotionId","findByPk","console","log","newOrder"],"mappings":"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","file":"orders.js","sourcesContent":["import db from \"../models\";\nimport { calculateOrderPrice } from \"../services/orderHelpers\";\n\nconst Order = db.orden;\nconst Product = db.producto;\nconst Promotion = db.promocion;\n\nconst findAllOrders = (req, res) => {\n    Order.findAll({\n        include: [{ model: Product, as: \"products\", nested: true }],\n    })\n        .then((orders) => res.json({ orders }))\n        .catch((err) => res.status(500).json({ err }));\n};\n\nconst findById = (req, res) => {\n    const id = req.params.orderId;\n\n    Order.findOne({\n        where: { id },\n    })\n        .then((order) => {\n            res.json({ order });\n        })\n        .catch((err) => res.status(500).json({ err }));\n};\n\nconst update = (req, res) => {\n    let {\n        type,\n        deliveryDate,\n        deliveryTime,\n        subtotal,\n        total,\n        inputDate,\n        state,\n    } = req.body;\n    const id = req.params.orderId;\n\n    Order.update(\n        {\n            type,\n            deliveryDate,\n            deliveryTime,\n            subtotal,\n            total,\n            inputDate,\n            state,\n        },\n        { where: { id } }\n    )\n        .then((promotion) => res.status(200).json({ promotion }))\n        .catch((err) => res.status(500).json({ err }));\n};\n\nconst deleteOrder = (req, res) => {\n    const id = req.params.orderId;\n\n    Order.destroy({ where: { id } })\n        .then(() =>\n            res\n                .status(200)\n                .json({ msg: \"Order has been deleted successfully!\" })\n        )\n        .catch((err) => res.status(500).json({ msg: \"Failed to delete!\" }));\n};\n\nconst create = (req, res) => {\n    const { user } = req;\n    const { type, products, promotionId } = req.body;\n    Promotion.findByPk(promotionId).then(promotion => {\n        const { subtotal, total } = calculateOrderPrice({\n            products,\n            promotion,\n        });\n        console.log(subtotal);\n\n        const newOrder = {\n            type,\n            products,\n            subtotal,\n            total\n        };\n\n        Order.create(newOrder)\n            .then((order) => res.status(200).json({ order }))\n            .catch((err) => res.status(500).json({ err }));\n    }).catch(err => res.status(500).json({ err}));\n    \n};\n\nexport { create, update, deleteOrder, findAllOrders, findById };\n"]}