{"version":3,"sources":["../../src/controllers/categories.js"],"names":["Product","db","producto","Category","categoria","findAllCategories","req","res","findAll","include","model","as","nested","then","categories","json","catch","err","status","findById","id","params","categoryId","findOne","where","category","create","body","name","description","newCategory"],"mappings":";;;;;;;AAAA;;;;;;AACA,IAAMA,UAAUC,iBAAGC,QAAnB;AACA,IAAMC,WAAWF,iBAAGG,SAApB;;AAEA,IAAMC,oBAAoB,SAApBA,iBAAoB,CAACC,GAAD,EAAMC,GAAN,EAAc;AACpCJ,aAASK,OAAT,CAAiB;AACbC,iBAAS,CAAC,EAAEC,OAAOV,OAAT,EAAkBW,IAAI,UAAtB,EAAkCC,QAAQ,KAA1C,EAAD;AADI,KAAjB,EAGKC,IAHL,CAGU,UAACC,UAAD,EAAgB;AAClBP,YAAIQ,IAAJ,CAAS,EAAED,sBAAF,EAAT;AACH,KALL,EAMKE,KANL,CAMW,UAACC,GAAD;AAAA,eAASV,IAAIW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEE,QAAF,EAArB,CAAT;AAAA,KANX;AAOH,CARD;;AAUA,IAAME,WAAW,SAAXA,QAAW,CAACb,GAAD,EAAMC,GAAN,EAAc;AAC3B,QAAMa,KAAKd,IAAIe,MAAJ,CAAWC,UAAtB;;AAEAnB,aAASoB,OAAT,CAAiB;AACbC,eAAO,EAAEJ,MAAF,EADM;AAEbX,iBAAS,CAAC,EAAEC,OAAOV,OAAT,EAAkBW,IAAI,UAAtB,EAAkCC,QAAQ,KAA1C,EAAD;AAFI,KAAjB,EAIKC,IAJL,CAIU,UAACY,QAAD,EAAc;AAChBlB,YAAIQ,IAAJ,CAAS,EAAEU,kBAAF,EAAT;AACH,KANL,EAOKT,KAPL,CAOW,UAACC,GAAD;AAAA,eAASV,IAAIW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEE,QAAF,EAArB,CAAT;AAAA,KAPX;AAQH,CAXD;;AAaA,IAAMS,SAAS,SAATA,MAAS,CAACpB,GAAD,EAAMC,GAAN,EAAc;AAAA,oBACGD,IAAIqB,IADP;AAAA,QACnBC,IADmB,aACnBA,IADmB;AAAA,QACbC,WADa,aACbA,WADa;;;AAGzB,QAAMC,cAAc;AAChBF,kBADgB;AAEhBC;AAFgB,KAApB;;AAKA1B,aAASuB,MAAT,CAAgBI,WAAhB,EACKjB,IADL,CACU,UAACY,QAAD;AAAA,eAAclB,IAAIQ,IAAJ,CAASU,QAAT,CAAd;AAAA,KADV,EAEKT,KAFL,CAEW,UAACC,GAAD;AAAA,eAASV,IAAIW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEE,QAAF,EAArB,CAAT;AAAA,KAFX;AAGH,CAXD;;QAaSS,M,GAAAA,M;QAAQrB,iB,GAAAA,iB;QAAmBc,Q,GAAAA,Q","file":"categories.js","sourcesContent":["import db from \"../models\";\nconst Product = db.producto;\nconst Category = db.categoria;\n\nconst findAllCategories = (req, res) => {\n    Category.findAll({\n        include: [{ model: Product, as: \"products\", nested: false }],\n    })\n        .then((categories) => {\n            res.json({ categories });\n        })\n        .catch((err) => res.status(500).json({ err }));\n};\n\nconst findById = (req, res) => {\n    const id = req.params.categoryId;\n\n    Category.findOne({\n        where: { id },\n        include: [{ model: Product, as: \"products\", nested: false }],\n    })\n        .then((category) => {\n            res.json({ category });\n        })\n        .catch((err) => res.status(500).json({ err }));\n};\n\nconst create = (req, res) => {\n    let { name, description } = req.body;\n\n    const newCategory = {\n        name,\n        description,\n    };\n\n    Category.create(newCategory)\n        .then((category) => res.json(category))\n        .catch((err) => res.status(500).json({ err }));\n};\n\nexport { create, findAllCategories, findById };\n"]}