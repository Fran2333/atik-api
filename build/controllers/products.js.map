{"version":3,"sources":["../../src/controllers/products.js"],"names":["Product","db","producto","Category","categoria","findAllProducts","req","res","findAll","include","model","as","nested","then","products","json","catch","err","status","findById","id","params","productId","findOne","where","product","create","body","name","price","description","flavor","size","indications","imageUrl","categories","newProduct","setCategories","rs","update","length","deleteProduct","destroy","msg"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEA;;;;;;AACA,IAAMA,UAAUC,iBAAGC,QAAnB;AACA,IAAMC,WAAWF,iBAAGG,SAApB;;AAEA;AACA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,GAAN,EAAc;AAClCP,YAAQQ,OAAR,CAAgB;AACZC,iBAAS,CAAC,EAAEC,OAAOP,QAAT,EAAmBQ,IAAI,YAAvB,EAAqCC,QAAQ,KAA7C,EAAD;AADG,KAAhB,EAGKC,IAHL,CAGU,UAACC,QAAD,EAAc;AAChBP,YAAIQ,IAAJ,CAAS,EAAED,kBAAF,EAAT;AACH,KALL,EAMKE,KANL,CAMW,UAACC,GAAD;AAAA,eAASV,IAAIW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEE,QAAF,EAArB,CAAT;AAAA,KANX;AAOH,CARD;;AAUA,IAAME,WAAW,SAAXA,QAAW,CAACb,GAAD,EAAMC,GAAN,EAAc;AAC3B,QAAMa,KAAKd,IAAIe,MAAJ,CAAWC,SAAtB;;AAEAtB,YAAQuB,OAAR,CAAgB;AACZC,eAAO,EAAEJ,MAAF,EADK;AAEZX,iBAAS,CAAC,EAAEC,OAAOP,QAAT,EAAmBQ,IAAI,YAAvB,EAAqCC,QAAQ,KAA7C,EAAD;AAFG,KAAhB,EAIKC,IAJL,CAIU,UAACY,OAAD,EAAa;AACflB,YAAIQ,IAAJ,CAAS,EAAEU,gBAAF,EAAT;AACH,KANL,EAOKT,KAPL,CAOW,UAACC,GAAD;AAAA,eAASV,IAAIW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEE,QAAF,EAArB,CAAT;AAAA,KAPX;AAQH,CAXD;;AAaA,IAAMS,SAAS,SAATA,MAAS,CAACpB,GAAD,EAAMC,GAAN,EAAc;AAAA,oBAUrBD,IAAIqB,IAViB;AAAA,QAErBC,IAFqB,aAErBA,IAFqB;AAAA,QAGrBC,KAHqB,aAGrBA,KAHqB;AAAA,QAIrBC,WAJqB,aAIrBA,WAJqB;AAAA,QAKrBC,MALqB,aAKrBA,MALqB;AAAA,QAMrBC,IANqB,aAMrBA,IANqB;AAAA,QAOrBC,WAPqB,aAOrBA,WAPqB;AAAA,QAQrBC,QARqB,aAQrBA,QARqB;AAAA,QASrBC,UATqB,aASrBA,UATqB;;;AAYzB,QAAMC,aAAa;AACfR,kBADe;AAEfC,oBAFe;AAGfC,gCAHe;AAIfC,sBAJe;AAKfC,kBALe;AAMfC,gCANe;AAOfC,0BAPe;AAQfC;AARe,KAAnB;;AAWAnC,YAAQ0B,MAAR,CAAeU,UAAf,EACKvB,IADL,CACU,UAACY,OAAD,EAAa;AACfA,gBACKY,aADL,CACmBF,UADnB,EAEKtB,IAFL,CAEU,UAACyB,EAAD;AAAA,mBAAQ/B,IAAIQ,IAAJ,CAASuB,EAAT,CAAR;AAAA,SAFV,EAGKtB,KAHL,CAGW,UAACC,GAAD;AAAA,mBAASV,IAAIW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEE,QAAF,EAArB,CAAT;AAAA,SAHX;AAIAV,YAAIQ,IAAJ,CAASU,OAAT;AACH,KAPL,EAQKT,KARL,CAQW,UAACC,GAAD;AAAA,eAASV,IAAIW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEE,QAAF,EAArB,CAAT;AAAA,KARX;AASH,CAhCD;;AAkCA,IAAMsB,SAAS,SAATA,MAAS,CAACjC,GAAD,EAAMC,GAAN,EAAc;AAAA,qBAUrBD,IAAIqB,IAViB;AAAA,QAErBC,IAFqB,cAErBA,IAFqB;AAAA,QAGrBC,KAHqB,cAGrBA,KAHqB;AAAA,QAIrBC,WAJqB,cAIrBA,WAJqB;AAAA,QAKrBC,MALqB,cAKrBA,MALqB;AAAA,QAMrBC,IANqB,cAMrBA,IANqB;AAAA,QAOrBC,WAPqB,cAOrBA,WAPqB;AAAA,QAQrBC,QARqB,cAQrBA,QARqB;AAAA,QASrBC,UATqB,cASrBA,UATqB;;AAWzB,QAAMf,KAAKd,IAAIe,MAAJ,CAAWC,SAAtB;;AAEAtB,YAAQuC,MAAR,CACI;AACIX,kBADJ;AAEIC,oBAFJ;AAGIC,gCAHJ;AAIIC,sBAJJ;AAKIC,kBALJ;AAMIC,gCANJ;AAOIC;AAPJ,KADJ,EAUI,EAAEV,OAAO,EAAEJ,MAAF,EAAT,EAVJ,EAYKP,IAZL,CAYU,UAACY,OAAD,EAAa;AACf,YAAIU,cAAcA,WAAWK,MAAX,GAAoB,CAAtC,EAAyC;AACrCf,oBACKY,aADL,CACmBF,UADnB,EAEKtB,IAFL,CAEU,UAACyB,EAAD;AAAA,uBAAQ/B,IAAIQ,IAAJ,CAASuB,EAAT,CAAR;AAAA,aAFV,EAGKtB,KAHL,CAGW,UAACC,GAAD;AAAA,uBAASV,IAAIW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEE,QAAF,EAArB,CAAT;AAAA,aAHX;AAIH,SALD,MAKO;AACH,mBAAOV,IAAIQ,IAAJ,CAASU,OAAT,CAAP;AACH;AACJ,KArBL,EAsBKT,KAtBL,CAsBW,UAACC,GAAD;AAAA,eAASV,IAAIW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEE,QAAF,EAArB,CAAT;AAAA,KAtBX;AAuBH,CApCD;;AAsCA,IAAMwB,gBAAgB,SAAhBA,aAAgB,CAACnC,GAAD,EAAMC,GAAN,EAAc;AAChC,QAAMa,KAAKd,IAAIe,MAAJ,CAAWC,SAAtB;;AAEAtB,YAAQ0C,OAAR,CAAgB,EAAElB,OAAO,EAAEJ,MAAF,EAAT,EAAhB,EACKP,IADL,CACU;AAAA,eACFN,IAAIW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAE4B,KAAK,wCAAP,EAArB,CADE;AAAA,KADV,EAIK3B,KAJL,CAIW,UAACC,GAAD;AAAA,eAASV,IAAIW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAE4B,KAAK,mBAAP,EAArB,CAAT;AAAA,KAJX;AAKH,CARD;;QAUSjB,M,GAAAA,M;QAAQa,M,GAAAA,M;QAAQE,a,GAAAA,a;QAAepC,e,GAAAA,e;QAAiBc,Q,GAAAA,Q","file":"products.js","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport passport from \"passport\";\n\nimport db from \"../models\";\nconst Product = db.producto;\nconst Category = db.categoria;\n\n// fetch all products\nconst findAllProducts = (req, res) => {\n    Product.findAll({\n        include: [{ model: Category, as: \"categories\", nested: false }],\n    })\n        .then((products) => {\n            res.json({ products });\n        })\n        .catch((err) => res.status(500).json({ err }));\n};\n\nconst findById = (req, res) => {\n    const id = req.params.productId;\n\n    Product.findOne({\n        where: { id },\n        include: [{ model: Category, as: \"categories\", nested: false }],\n    })\n        .then((product) => {\n            res.json({ product });\n        })\n        .catch((err) => res.status(500).json({ err }));\n};\n\nconst create = (req, res) => {\n    let {\n        name,\n        price,\n        description,\n        flavor,\n        size,\n        indications,\n        imageUrl,\n        categories,\n    } = req.body;\n\n    const newProduct = {\n        name,\n        price,\n        description,\n        flavor,\n        size,\n        indications,\n        imageUrl,\n        categories,\n    };\n\n    Product.create(newProduct)\n        .then((product) => {\n            product\n                .setCategories(categories)\n                .then((rs) => res.json(rs))\n                .catch((err) => res.status(500).json({ err }));\n            res.json(product);\n        })\n        .catch((err) => res.status(500).json({ err }));\n};\n\nconst update = (req, res) => {\n    let {\n        name,\n        price,\n        description,\n        flavor,\n        size,\n        indications,\n        imageUrl,\n        categories,\n    } = req.body;\n    const id = req.params.productId;\n\n    Product.update(\n        {\n            name,\n            price,\n            description,\n            flavor,\n            size,\n            indications,\n            imageUrl,\n        },\n        { where: { id } }\n    )\n        .then((product) => {\n            if (categories && categories.length > 0) {\n                product\n                    .setCategories(categories)\n                    .then((rs) => res.json(rs))\n                    .catch((err) => res.status(500).json({ err }));\n            } else {\n                return res.json(product);\n            }\n        })\n        .catch((err) => res.status(500).json({ err }));\n};\n\nconst deleteProduct = (req, res) => {\n    const id = req.params.productId;\n\n    Product.destroy({ where: { id } })\n        .then(() =>\n            res.status(200).json({ msg: \"Product has been deleted successfully!\" })\n        )\n        .catch((err) => res.status(500).json({ msg: \"Failed to delete!\" }));\n};\n\nexport { create, update, deleteProduct, findAllProducts, findById };\n"]}