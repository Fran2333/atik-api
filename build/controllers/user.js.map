{"version":3,"sources":["../../src/controllers/user.js"],"names":["User","db","usuario","Order","orden","create","req","res","body","errors","isValid","firstname","lastname","username","role","email","password","status","json","findAll","where","then","user","length","newUser","bcrypt","genSalt","err","salt","hash","catch","me","login","originalPassword","dataValues","compare","isMatch","console","log","id","payload","jwt","sign","expiresIn","token","success","findAllUsers","findById","params","userId","msg","update","deleteUser","destroy"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AAKA;;;;AACA;;;;;;AALA,IAAMA,OAAOC,iBAAGC,OAAhB;AACA,IAAMC,QAAQF,iBAAGG,KAAjB;;AAEA;;;AAIA;AACA,IAAMC,SAAS,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,8BACD,wBAAqBD,IAAIE,IAAzB,CADC;AAAA,MACpBC,MADoB,yBACpBA,MADoB;AAAA,MACZC,OADY,yBACZA,OADY;;AAAA,kBAEoCJ,IAAIE,IAFxC;AAAA,MAEpBG,SAFoB,aAEpBA,SAFoB;AAAA,MAETC,QAFS,aAETA,QAFS;AAAA,MAECC,QAFD,aAECA,QAFD;AAAA,MAEWC,IAFX,aAEWA,IAFX;AAAA,MAEiBC,KAFjB,aAEiBA,KAFjB;AAAA,MAEwBC,QAFxB,aAEwBA,QAFxB;;AAI3B;;AACA,MAAI,CAACN,OAAL,EAAc;AACZ,WAAOH,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBT,MAArB,CAAP;AACD;;AAEDT,OAAKmB,OAAL,CAAa,EAACC,OAAO,EAACL,YAAD,EAAR,EAAb,EAA+BM,IAA/B,CAAoC,gBAAQ;AAC1C,QAAIC,KAAKC,MAAT,EAAiB;AACf,aAAOhB,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACH,OAAO,uBAAR,EAArB,CAAP;AACD,KAFD,MAEO;AACL,UAAIS,UAAU;AACZb,4BADY;AAEZC,0BAFY;AAGZC,0BAHY;AAIZC,kBAJY;AAKZC,oBALY;AAMZC;AANY,OAAd;AAQAS,yBAAOC,OAAP,CAAe,EAAf,EAAmB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAChCH,2BAAOI,IAAP,CAAYL,QAAQR,QAApB,EAA8BY,IAA9B,EAAoC,UAACD,GAAD,EAAME,IAAN,EAAe;AACjD,cAAIF,GAAJ,EAAS,MAAMA,GAAN;AACTH,kBAAQR,QAAR,GAAmBa,IAAnB;AACA7B,eAAKK,MAAL,CAAYmB,OAAZ,EACGH,IADH,CACQ,gBAAQ;AACZd,gBAAIW,IAAJ,CAAS,EAACI,UAAD,EAAT;AACD,WAHH,EAIGQ,KAJH,CAIS,eAAO;AACZvB,gBAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACS,QAAD,EAArB;AACD,WANH;AAOD,SAVD;AAWD,OAZD;AAaD;AACF,GA1BD;AA2BD,CApCD;;AAsCA,IAAMI,KAAK,SAALA,EAAK,CAACzB,GAAD,EAAMC,GAAN,EAAc;AAAA,MAChBe,IADgB,GACRhB,GADQ,CAChBgB,IADgB;;;AAGvBf,MAAIW,IAAJ,CAAS,EAACI,UAAD,EAAT;AACD,CAJD;;AAMA,IAAMU,QAAQ,SAARA,KAAQ,CAAC1B,GAAD,EAAMC,GAAN,EAAc;AAAA,2BACA,qBAAkBD,IAAIE,IAAtB,CADA;AAAA,MACnBC,MADmB,sBACnBA,MADmB;AAAA,MACXC,OADW,sBACXA,OADW;;AAG1B;;;AACA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOH,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBT,MAArB,CAAP;AACD;;AANyB,mBAQAH,IAAIE,IARJ;AAAA,MAQnBO,KARmB,cAQnBA,KARmB;AAAA,MAQZC,QARY,cAQZA,QARY;;;AAU1BhB,OAAKmB,OAAL,CAAa;AACXC,WAAO;AACLL;AADK;AADI,GAAb,EAKGM,IALH,CAKQ,gBAAQ;AACZ;AACA,QAAI,CAACC,KAAKC,MAAV,EAAkB;AAChBd,aAAOM,KAAP,GAAe,iBAAf;AACA,aAAOR,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBT,MAArB,CAAP;AACD;;AAED,QAAIwB,mBAAmBX,KAAK,CAAL,EAAQY,UAAR,CAAmBlB,QAA1C;;AAEA;AACAS,uBACGU,OADH,CACWnB,QADX,EACqBiB,gBADrB,EAEGZ,IAFH,CAEQ,mBAAW;AACf,UAAIe,OAAJ,EAAa;AACX;AACAC,gBAAQC,GAAR,CAAY,UAAZ;AAFW,iCAGYhB,KAAK,CAAL,EAAQY,UAHpB;AAAA,YAGJK,EAHI,sBAGJA,EAHI;AAAA,YAGA1B,QAHA,sBAGAA,QAHA;;AAIX,YAAM2B,UAAU,EAACD,MAAD,EAAK1B,kBAAL,EAAhB,CAJW,CAIqB;AAChC;;AAEA4B,+BAAIC,IAAJ,CACEF,OADF,EAEE,QAFF,EAGE;AACEG,qBAAW;AADb,SAHF,EAME,UAAChB,GAAD,EAAMiB,KAAN,EAAgB;AACdrC,cAAIW,IAAJ,CAAS;AACP2B,qBAAS,IADF;AAEPD,mBAAO,YAAYA,KAFZ;AAGP9B,kBAAMQ,KAAK,CAAL,EAAQY,UAAR,CAAmBpB;AAHlB,WAAT;AAKD,SAZH;AAcD,OArBD,MAqBO;AACLL,eAAOO,QAAP,GAAkB,sBAAlB;AACA,eAAOT,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBT,MAArB,CAAP;AACD;AACF,KA5BH,EA6BGqB,KA7BH,CA6BS;AAAA,aAAOO,QAAQC,GAAR,CAAYX,GAAZ,CAAP;AAAA,KA7BT;AA8BD,GA7CH,EA8CGG,KA9CH,CA8CS;AAAA,WAAOvB,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACS,QAAD,EAArB,CAAP;AAAA,GA9CT;AA+CD,CAzDD;;AA2DA;AACA,IAAMmB,eAAe,SAAfA,YAAe,CAACxC,GAAD,EAAMC,GAAN,EAAc;AACjCP,OAAKmB,OAAL,GACGE,IADH,CACQ,gBAAQ;AACZd,QAAIW,IAAJ,CAAS,EAACI,UAAD,EAAT;AACD,GAHH,EAIGQ,KAJH,CAIS;AAAA,WAAOvB,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACS,QAAD,EAArB,CAAP;AAAA,GAJT;AAKD,CAND;;AAQA;AACA,IAAMoB,WAAW,SAAXA,QAAW,CAACzC,GAAD,EAAMC,GAAN,EAAc;AAC7B,MAAMgC,KAAKjC,IAAI0C,MAAJ,CAAWC,MAAtB;;AAEAjD,OAAKmB,OAAL,CAAa,EAACC,OAAO,EAACmB,MAAD,EAAR,EAAb,EACGlB,IADH,CACQ,gBAAQ;AACZ,QAAI,CAACC,KAAKC,MAAV,EAAkB;AAChB,aAAOhB,IAAIW,IAAJ,CAAS,EAACgC,KAAK,gBAAN,EAAT,CAAP;AACD;AACD3C,QAAIW,IAAJ,CAAS,EAACI,UAAD,EAAT;AACD,GANH,EAOGQ,KAPH,CAOS;AAAA,WAAOvB,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACS,QAAD,EAArB,CAAP;AAAA,GAPT;AAQD,CAXD;;AAaA;AACA,IAAMwB,SAAS,SAATA,MAAS,CAAC7C,GAAD,EAAMC,GAAN,EAAc;AAAA,mBACOD,IAAIE,IADX;AAAA,MACtBG,SADsB,cACtBA,SADsB;AAAA,MACXC,QADW,cACXA,QADW;AAAA,MACDE,IADC,cACDA,IADC;;AAE3B,MAAMyB,KAAKjC,IAAI0C,MAAJ,CAAWC,MAAtB;;AAEAjD,OAAKmD,MAAL,CACE;AACExC,wBADF;AAEEC,sBAFF;AAGEE;AAHF,GADF,EAME,EAACM,OAAO,EAACmB,MAAD,EAAR,EANF,EAQGlB,IARH,CAQQ;AAAA,WAAQd,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACI,UAAD,EAArB,CAAR;AAAA,GARR,EASGQ,KATH,CASS;AAAA,WAAOvB,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACS,QAAD,EAArB,CAAP;AAAA,GATT;AAUD,CAdD;;AAgBA;AACA,IAAMyB,aAAa,SAAbA,UAAa,CAAC9C,GAAD,EAAMC,GAAN,EAAc;AAC/B,MAAMgC,KAAKjC,IAAI0C,MAAJ,CAAWC,MAAtB;;AAEAjD,OAAKqD,OAAL,CAAa,EAACjC,OAAO,EAACmB,MAAD,EAAR,EAAb,EACGlB,IADH,CACQ;AAAA,WAAMd,IAAIW,IAAJ,CAAS,EAACgC,KAAK,qCAAN,EAAT,CAAN;AAAA,GADR,EAEGpB,KAFH,CAES;AAAA,WAAOvB,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACgC,KAAK,mBAAN,EAArB,CAAP;AAAA,GAFT;AAGD,CAND;;QAQQ7C,M,GAAAA,M;QAAQ2B,K,GAAAA,K;QAAOD,E,GAAAA,E;QAAIe,Y,GAAAA,Y;QAAcC,Q,GAAAA,Q;QAAUI,M,GAAAA,M;QAAQC,U,GAAAA,U","file":"user.js","sourcesContent":["import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport passport from 'passport';\n\nimport db from '../models';\nconst User = db.usuario;\nconst Order = db.orden;\n\n// load input validation\nimport validateRegisterForm from '../validation/register';\nimport validateLoginForm from '../validation/login';\n\n// create user\nconst create = (req, res) => {\n  const {errors, isValid} = validateRegisterForm(req.body);\n  const {firstname, lastname, username, role, email, password} = req.body;\n\n  // check validation\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  User.findAll({where: {email}}).then(user => {\n    if (user.length) {\n      return res.status(400).json({email: 'Email already exists!'});\n    } else {\n      let newUser = {\n        firstname,\n        lastname,\n        username,\n        role,\n        email,\n        password,\n      };\n      bcrypt.genSalt(10, (err, salt) => {\n        bcrypt.hash(newUser.password, salt, (err, hash) => {\n          if (err) throw err;\n          newUser.password = hash;\n          User.create(newUser)\n            .then(user => {\n              res.json({user});\n            })\n            .catch(err => {\n              res.status(500).json({err});\n            });\n        });\n      });\n    }\n  });\n};\n\nconst me = (req, res) => {\n  const {user} = req;\n\n  res.json({user});\n};\n\nconst login = (req, res) => {\n  const {errors, isValid} = validateLoginForm(req.body);\n\n  // check validation\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  const {email, password} = req.body;\n\n  User.findAll({\n    where: {\n      email,\n    },\n  })\n    .then(user => {\n      //check for user\n      if (!user.length) {\n        errors.email = 'User not found!';\n        return res.status(404).json(errors);\n      }\n\n      let originalPassword = user[0].dataValues.password;\n\n      //check for password\n      bcrypt\n        .compare(password, originalPassword)\n        .then(isMatch => {\n          if (isMatch) {\n            // user matched\n            console.log('matched!');\n            const {id, username} = user[0].dataValues;\n            const payload = {id, username}; //jwt payload\n            // console.log(payload)\n\n            jwt.sign(\n              payload,\n              'secret',\n              {\n                expiresIn: '72h',\n              },\n              (err, token) => {\n                res.json({\n                  success: true,\n                  token: 'Bearer ' + token,\n                  role: user[0].dataValues.role,\n                });\n              },\n            );\n          } else {\n            errors.password = 'Password not correct';\n            return res.status(400).json(errors);\n          }\n        })\n        .catch(err => console.log(err));\n    })\n    .catch(err => res.status(500).json({err}));\n};\n\n// fetch all users\nconst findAllUsers = (req, res) => {\n  User.findAll()\n    .then(user => {\n      res.json({user});\n    })\n    .catch(err => res.status(500).json({err}));\n};\n\n// fetch user by userId\nconst findById = (req, res) => {\n  const id = req.params.userId;\n\n  User.findAll({where: {id}})\n    .then(user => {\n      if (!user.length) {\n        return res.json({msg: 'user not found'});\n      }\n      res.json({user});\n    })\n    .catch(err => res.status(500).json({err}));\n};\n\n// update a user's info\nconst update = (req, res) => {\n  let {firstname, lastname, role} = req.body;\n  const id = req.params.userId;\n\n  User.update(\n    {\n      firstname,\n      lastname,\n      role,\n    },\n    {where: {id}},\n  )\n    .then(user => res.status(200).json({user}))\n    .catch(err => res.status(500).json({err}));\n};\n\n// delete a user\nconst deleteUser = (req, res) => {\n  const id = req.params.userId;\n\n  User.destroy({where: {id}})\n    .then(() => res.json({msg: 'User has been deleted successfully!'}))\n    .catch(err => res.status(500).json({msg: 'Failed to delete!'}));\n};\n\nexport {create, login, me, findAllUsers, findById, update, deleteUser};\n"]}