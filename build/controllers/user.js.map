{"version":3,"sources":["../../src/controllers/user.js"],"names":["User","db","usuario","Order","orden","create","req","res","body","errors","isValid","firstname","lastname","username","role","email","password","status","json","findAll","where","then","user","length","newUser","bcrypt","genSalt","err","salt","hash","catch","login","originalPassword","dataValues","compare","isMatch","console","log","id","payload","jwt","sign","expiresIn","token","success","findAllUsers","include","all","findById","params","userId","msg","update","deleteUser","destroy"],"mappings":"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","file":"user.js","sourcesContent":["import bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport passport from \"passport\";\n\nimport db from \"../models\";\nconst User = db.usuario;\nconst Order = db.orden;\n\n// load input validation\nimport validateRegisterForm from \"../validation/register\";\nimport validateLoginForm from \"../validation/login\";\n\n// create user\nconst create = (req, res) => {\n    const { errors, isValid } = validateRegisterForm(req.body);\n    const { firstname, lastname, username, role, email, password } = req.body;\n\n    // check validation\n    if (!isValid) {\n        return res.status(400).json(errors);\n    }\n\n    User.findAll({ where: { email } }).then((user) => {\n        if (user.length) {\n            return res.status(400).json({ email: \"Email already exists!\" });\n        } else {\n            let newUser = {\n                firstname,\n                lastname,\n                username,\n                role,\n                email,\n                password,\n            };\n            bcrypt.genSalt(10, (err, salt) => {\n                bcrypt.hash(newUser.password, salt, (err, hash) => {\n                    if (err) throw err;\n                    newUser.password = hash;\n                    User.create(newUser)\n                        .then((user) => {\n                            res.json({ user });\n                        })\n                        .catch((err) => {\n                            res.status(500).json({ err });\n                        });\n                });\n            });\n        }\n    });\n};\n\nconst login = (req, res) => {\n    const { errors, isValid } = validateLoginForm(req.body);\n\n    // check validation\n    if (!isValid) {\n        return res.status(400).json(errors);\n    }\n\n    const { email, password } = req.body;\n\n    User.findAll({\n        where: {\n            email,\n        },\n    })\n        .then((user) => {\n            //check for user\n            if (!user.length) {\n                errors.email = \"User not found!\";\n                return res.status(404).json(errors);\n            }\n\n            let originalPassword = user[0].dataValues.password;\n\n            //check for password\n            bcrypt\n                .compare(password, originalPassword)\n                .then((isMatch) => {\n                    if (isMatch) {\n                        // user matched\n                        console.log(\"matched!\");\n                        const { id, username } = user[0].dataValues;\n                        const payload = { id, username }; //jwt payload\n                        // console.log(payload)\n\n                        jwt.sign(\n                            payload,\n                            \"secret\",\n                            {\n                                expiresIn: 3600,\n                            },\n                            (err, token) => {\n                                res.json({\n                                    success: true,\n                                    token: \"Bearer \" + token,\n                                    role: user[0].dataValues.role,\n                                });\n                            }\n                        );\n                    } else {\n                        errors.password = \"Password not correct\";\n                        return res.status(400).json(errors);\n                    }\n                })\n                .catch((err) => console.log(err));\n        })\n        .catch((err) => res.status(500).json({ err }));\n};\n\n// fetch all users\nconst findAllUsers = (req, res) => {\n    User.findAll({ include: [{ all: true }] })\n        .then((user) => {\n            res.json({ user });\n        })\n        .catch((err) => res.status(500).json({ err }));\n};\n\n// fetch user by userId\nconst findById = (req, res) => {\n    const id = req.params.userId;\n\n    User.findAll({ where: { id } })\n        .then((user) => {\n            if (!user.length) {\n                return res.json({ msg: \"user not found\" });\n            }\n            res.json({ user });\n        })\n        .catch((err) => res.status(500).json({ err }));\n};\n\n// update a user's info\nconst update = (req, res) => {\n    let { firstname, lastname, role } = req.body;\n    const id = req.params.userId;\n\n    User.update(\n        {\n            firstname,\n            lastname,\n            role,\n        },\n        { where: { id } }\n    )\n        .then((user) => res.status(200).json({ user }))\n        .catch((err) => res.status(500).json({ err }));\n};\n\n// delete a user\nconst deleteUser = (req, res) => {\n    const id = req.params.userId;\n\n    User.destroy({ where: { id } })\n        .then(() =>\n            res.status.json({ msg: \"User has been deleted successfully!\" })\n        )\n        .catch((err) => res.status(500).json({ msg: \"Failed to delete!\" }));\n};\n\nexport { create, login, findAllUsers, findById, update, deleteUser };\n"]}